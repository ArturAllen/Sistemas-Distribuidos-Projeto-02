# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dht_pb2 as dht__pb2

GRPC_GENERATED_VERSION = '1.65.4'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dht_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class DHTStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Join = channel.unary_unary(
                '/DHT/Join',
                request_serializer=dht__pb2.JoinRequest.SerializeToString,
                response_deserializer=dht__pb2.JoinResponse.FromString,
                _registered_method=True)
        self.InformNewSucc = channel.unary_unary(
                '/DHT/InformNewSucc',
                request_serializer=dht__pb2.InformSuccRequest.SerializeToString,
                response_deserializer=dht__pb2.InformSuccResponse.FromString,
                _registered_method=True)
        self.Found = channel.unary_unary(
                '/DHT/Found',
                request_serializer=dht__pb2.FoundRequest.SerializeToString,
                response_deserializer=dht__pb2.FoundRequest.FromString,
                _registered_method=True)
        self.Store = channel.unary_unary(
                '/DHT/Store',
                request_serializer=dht__pb2.StoreRequest.SerializeToString,
                response_deserializer=dht__pb2.StoreResponse.FromString,
                _registered_method=True)
        self.Retrieve = channel.unary_unary(
                '/DHT/Retrieve',
                request_serializer=dht__pb2.RetrieveRequest.SerializeToString,
                response_deserializer=dht__pb2.RetrieveResponse.FromString,
                _registered_method=True)
        self.Leave = channel.unary_unary(
                '/DHT/Leave',
                request_serializer=dht__pb2.LeaveRequest.SerializeToString,
                response_deserializer=dht__pb2.LeaveResponse.FromString,
                _registered_method=True)
        self.Transfer = channel.unary_unary(
                '/DHT/Transfer',
                request_serializer=dht__pb2.TransferRequest.SerializeToString,
                response_deserializer=dht__pb2.TransferResponse.FromString,
                _registered_method=True)
        self.Test = channel.unary_unary(
                '/DHT/Test',
                request_serializer=dht__pb2.TestRequest.SerializeToString,
                response_deserializer=dht__pb2.TestResponse.FromString,
                _registered_method=True)


class DHTServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InformNewSucc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Found(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Store(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Retrieve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Leave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DHTServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=dht__pb2.JoinRequest.FromString,
                    response_serializer=dht__pb2.JoinResponse.SerializeToString,
            ),
            'InformNewSucc': grpc.unary_unary_rpc_method_handler(
                    servicer.InformNewSucc,
                    request_deserializer=dht__pb2.InformSuccRequest.FromString,
                    response_serializer=dht__pb2.InformSuccResponse.SerializeToString,
            ),
            'Found': grpc.unary_unary_rpc_method_handler(
                    servicer.Found,
                    request_deserializer=dht__pb2.FoundRequest.FromString,
                    response_serializer=dht__pb2.FoundRequest.SerializeToString,
            ),
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=dht__pb2.StoreRequest.FromString,
                    response_serializer=dht__pb2.StoreResponse.SerializeToString,
            ),
            'Retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=dht__pb2.RetrieveRequest.FromString,
                    response_serializer=dht__pb2.RetrieveResponse.SerializeToString,
            ),
            'Leave': grpc.unary_unary_rpc_method_handler(
                    servicer.Leave,
                    request_deserializer=dht__pb2.LeaveRequest.FromString,
                    response_serializer=dht__pb2.LeaveResponse.SerializeToString,
            ),
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=dht__pb2.TransferRequest.FromString,
                    response_serializer=dht__pb2.TransferResponse.SerializeToString,
            ),
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=dht__pb2.TestRequest.FromString,
                    response_serializer=dht__pb2.TestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DHT', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DHT', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DHT(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DHT/Join',
            dht__pb2.JoinRequest.SerializeToString,
            dht__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InformNewSucc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DHT/InformNewSucc',
            dht__pb2.InformSuccRequest.SerializeToString,
            dht__pb2.InformSuccResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Found(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DHT/Found',
            dht__pb2.FoundRequest.SerializeToString,
            dht__pb2.FoundRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DHT/Store',
            dht__pb2.StoreRequest.SerializeToString,
            dht__pb2.StoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DHT/Retrieve',
            dht__pb2.RetrieveRequest.SerializeToString,
            dht__pb2.RetrieveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Leave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DHT/Leave',
            dht__pb2.LeaveRequest.SerializeToString,
            dht__pb2.LeaveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DHT/Transfer',
            dht__pb2.TransferRequest.SerializeToString,
            dht__pb2.TransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DHT/Test',
            dht__pb2.TestRequest.SerializeToString,
            dht__pb2.TestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
